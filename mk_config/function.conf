
# if folder is not exist, create it
# param 1: path
CHECK_FOLDER=test -d $(1) || mkdir -p $(1)

# if folder exist, clean, or create new
define RESET_FOLDER
	@if [ -d $(1) ];then \
		rm -rf $(1); \
	fi
	mkdir -p $(1)
endef

# use build script to build module
# param 1: module name
# param 2: build type
define BUILD_WITH_CONFIG
	@if [ -f mk_build/$(1).build ]; then \
		make mk_$(1)_$(2) || exit 1; \
	else \
		echo "$(1).build is not exist"; \
		exit 1;\
	fi
endef

# store config file to config folder
# param 1: module name
# param 2: src path and name
define KEEP_CONFIG
	@$(call CHECK_FOLDER,$(CONFIG))
	@cp -f $(2) $(CONFIG)/$(1)_config
endef

# use config folder's config file
# param 1: module name
# param 2: dest path and name
define USE_CONFIG =
	@if [ ! -f $(CONFIG)/$(1)_config ]; then \
		echo "$(1)_config is not exist"; \
		exit 1; \
	fi
	@cp -f $(CONFIG)/$(1)_config $(2)
endef

# get package from remote server
# param 1: package server path
# param 2: package remote path
define CHECK_GET_PACKAGE
	$(call CHECK_FOLDER,$(ROOT)/source)
	@if [ ! -f $(ROOT)/source/$(2) ]; then \
		@echo "Get $(2) from $(1)"; \
		$(call CHECK_FOLDER,$(ROOT)/source); \
		cd $(ROOT)/source; wget $(1)/$(2); \
	fi
endef

# unpack package to application folder
# param 1: package name
# param 2: package file name
# param 3: strip components number
define UNPACKE
	@if [ -d $($(ROOT)/Application/$(1)) ]; then \
		rm -f $($(ROOT)/Application/$(1)); \
	fi
	mkdir -p $(ROOT)/Application/$(1)
    tar xvjf $(ROOT)/source/$(2) -C $(ROOT)/Application/$(1) --strip-components=$(3)
endef
